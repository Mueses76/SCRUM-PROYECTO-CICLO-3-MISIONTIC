{"remainingRequest":"C:\\Users\\Administrator\\Documents\\MisionTicCiclo3\\CourseSearch\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Documents\\MisionTicCiclo3\\CourseSearch\\client\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Administrator\\Documents\\MisionTicCiclo3\\CourseSearch\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Administrator\\Documents\\MisionTicCiclo3\\CourseSearch\\client\\src\\components\\bodyIndex.vue?vue&type=template&id=3027d470&","dependencies":[{"path":"C:\\Users\\Administrator\\Documents\\MisionTicCiclo3\\CourseSearch\\client\\src\\components\\bodyIndex.vue","mtime":1633783727301},{"path":"C:\\Users\\Administrator\\Documents\\MisionTicCiclo3\\CourseSearch\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1633493720512},{"path":"C:\\Users\\Administrator\\Documents\\MisionTicCiclo3\\CourseSearch\\client\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1633493809911},{"path":"C:\\Users\\Administrator\\Documents\\MisionTicCiclo3\\CourseSearch\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1633493720512},{"path":"C:\\Users\\Administrator\\Documents\\MisionTicCiclo3\\CourseSearch\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":1633493761556}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}